int			check_edges(t_triangle triangle, t_v3 p, t_v3 n)
{
	t_v3	c;
	t_v3	edge;
	t_v3	vp;

	edge = substract(triangle.b, triangle.a);
	vp = substract(p, triangle.a);
	c = cross_product(edge, vp);
	if (dot_product(n, c) < 0)
		return (0);
	edge = substract(triangle.c, triangle.b);
	vp = substract(p, triangle.b);
	c = cross_product(edge, vp);
	if (dot_product(n, c) < 0)
		return (0);
	edge = substract(triangle.a, triangle.c);
	vp = substract(p, triangle.c);
	c = cross_product(edge, vp);
	if (dot_product(n, c) < 0)
		return (0);
	return (1);
}

int			intersect_triangle(t_ray ray, t_triangle triangle, double *t)
{
	t_v3	a;
	t_v3	b;
	t_v3	n;
	double	angle;
	t_v3	p;

	a = substract(triangle.b, triangle.a);
	b = substract(triangle.c, triangle.a);
	n = cross_product(a, b);
	normalize_vector(&n);
	angle = dot_product(n, ray.direction);
	if (fabs(angle) < 1e-6)
		return (0);
	*t = (dot_product(n, substract(triangle.a, ray.origin)) / angle);
	if (*t < 0)
		return (0);
	p = v3_add(ray.origin, v3_multiply(ray.direction, *t));
	return (check_edges(triangle, p, n));
}
t_v3		get_square_normal(t_square square)
{
	t_v3 ret;

	ret = square.normal;
	return (ret);
}

int			intersect_square(t_ray ray, t_square square, double *t)
{
	double	denom;
	t_v3	hit_point;
	t_v3	p0l0;

	denom = dot_product(square.normal, ray.direction);
	if (fabs(denom) > 1e-6)
	{
		p0l0 = substract(square.center, ray.origin);
		*t = dot_product(p0l0, square.normal) / denom;
		hit_point = v3_add(ray.origin, v3_multiply(ray.direction, *t));
		if (*t >= 0)
		{
			if (fabs(hit_point.x - square.center.x) > (square.length / 2))
				return (0);
			if (fabs(hit_point.y - square.center.y) > (square.length / 2))
				return (0);
			if (fabs(hit_point.z - square.center.z) > (square.length / 2))
				return (0);
			else
				return (1);
		}
		else
			return (0);
	}
	return (0);
}
